"""
2
16 26
00000000000000000000000000
00000000000000000000000000
000000001DB176C588D26EC000
000000001DB176C588D26EC000
000000001DB176C588D26EC000
000000001DB176C588D26EC000
000000001DB176C588D26EC000
000000001DB176C588D26EC000
000000001DB176C588D26EC000
000000001DB176C588D26EC000
000000001DB176C588D26EC000
000000001DB176C588D26EC000
000000001DB176C588D26EC000
000000001DB176C588D26EC000
00000000000000000000000000
00000000000000000000000000
18 50
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
000000000000000000000000000196EBC5A316C57800000000
000000000000000000000000000196EBC5A316C57800000000
000000328D1AF6E4C9BB0000000196EBC5A316C57800000000
000000328D1AF6E4C9BB0000000196EBC5A316C57800000000
000000328D1AF6E4C9BB0000000196EBC5A316C57800000000
000000328D1AF6E4C9BB0000000196EBC5A316C57800000000
000000328D1AF6E4C9BB0000000196EBC5A316C57800000000
000000328D1AF6E4C9BB0000000196EBC5A316C57800000000
000000328D1AF6E4C9BB0000000196EBC5A316C57800000000
000000328D1AF6E4C9BB0000000196EBC5A316C57800000000
000000328D1AF6E4C9BB0000000196EBC5A316C57800000000
000000328D1AF6E4C9BB0000000196EBC5A316C57800000000
000000000000000000000000000196EBC5A316C57800000000
000000000000000000000000000196EBC5A316C57800000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000

"""
number = {'112': 0, '122': 1, '221': 2, '114': 3, '231': 4, '132': 5, '411': 6, '213': 7, '312': 8, '211': 9}
binary = {'0': '0000', '1': '0001', '2': '0010', '3': '0011', '4': '0100', '5': '0101', '6': '0110', '7': '0111',
          '8': '1000', '9': '1001', 'A': '1010', 'B': '1011', 'C': '1100', 'D': '1101', 'E': '1110', 'F': '1111'}


def examine(arr):  # 검증조건 맞는지
    if ((arr[7] + arr[5] + arr[3] + arr[1]) * 3 + arr[0] + arr[2] + arr[4] + arr[6]) % 10:
        return False
    return True


T = int(input())
for tc in range(1, T + 1):
    N, M = map(int, input().split())
    # 문자열로 한줄씩 입력받기
    big_code = [input() for _ in range(N)]

    visited = []
    ans = 0
    print(big_code)
    # for n in range(N):
    #     binarified = ''
    #     for char in big_code[n]:
    #         binarified += binary[char]
    #     big_code[n] = binarified
    # res = []


    # for n in range(N):
    #     f1 = f2 = f3 = 0
    #     if '1' not in big_code[n]:
    #         continue
    #     for m in range(M * 4 - 1, -1, -1):
    #         if f2 == 0 and f3 == 0 and big_code[n][m] == '1':  # 첫 1
    #             f1 += 1
    #         elif f1 and f3 == 0 and big_code[n][m] == '0':  # 10
    #             f2 += 1
    #         elif f1 and f2 and big_code[n][m] == '1':  # 1001
    #             f3 += 1
    #         elif f3 and big_code[n][m] == '0':
    #             mul = min(f1, f2, f3)
    #             res.append(number[str(f1 // mul) + str(f2 // mul) + str(f3 // mul)])
    #             f1 = f2 = f3 = 0
    #             if len(res) == 8:
    #                 if res not in visited:
    #                     if examine(res):
    #                         ans += sum(res)
    #                     visited.append(res)
    #                 res = []
    # print(f'#{tc}', ans)