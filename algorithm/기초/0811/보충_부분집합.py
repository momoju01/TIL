# lst = [-7, -3, -2, 5, 8]
#
# isIn =[0, 1, 0, 1, 1]  #  =>(3, 5, 8)
# isIn =[0, 0, 0, 0, 0] , [0, 0, 0, 0, 1]: {8}  => [1, 1, 1, 1, 1] =>다 들어있는 것까지

# 굳이 공간을 쓰지 말고 이렇게 쓰면 좋을 거 같은데?
# & 연산자를 쓰자!!

i = 0b00101  # 1* 2^ 2 + 0 *2 ^1 + 1 * 2^0 => 5
             # 345 => 3*10^2 + 4*10^1 + 5*10^0 과 같음

i: 0 bit

0 & 0 -> 0
0 & 1 -> 0
1 & 0 -> 0
1 & 1 -> 1


0 bit: #를 구하고 싶으면
 i & 0b00001 -> 0b00000/0b00001
1 bit:  # 왼쪽으로 1을 1 번 옮김
 i & 0b00010 -> 0b00000/0b00010
2 bit: # 왼쪽으로 1을 2 번 옮김
j bit:
 i & 1 << j


N = 5
for i in range(0, 0b100000): # 0b11111 + 1 = 0b100000
        #(1<<N 번 왼쪽으로 옮기는 것과 똑같음!! )

    sumV = 0  #부분집합의 합
    for j in range(N):
        if i & (i <<N) == 0:
            sumV += lst[j]
            print(i)
        #else:
            #print('0')
